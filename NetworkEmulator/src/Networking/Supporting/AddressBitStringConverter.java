package Networking.Supporting;

import Networking.IPv4;
import Networking.IPv6;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

public class AddressBitStringConverter{
    /**
     * Converts extension as address value to BitString style String.
     * @param ipv4 {@link IPv4} address to convert.
     * @return {@link String} BitString style String.
     * @throws IllegalMaskException if address is invalid.
     */
    @Contract("_ -> new")
    public static @NotNull String toBitString(@NotNull IPv4 ipv4) throws IllegalMaskException {
        return switch (ipv4.toString()) {
            case "128.0.0.0" -> "10000000.00000000.00000000.00000000";
            case "192.0.0.0" -> "11000000.00000000.00000000.00000000";
            case "224.0.0.0" -> "11100000.00000000.00000000.00000000";
            case "240.0.0.0" -> "11110000.00000000.00000000.00000000";
            case "248.0.0.0" -> "11111000.00000000.00000000.00000000";
            case "252.0.0.0" -> "11111100.00000000.00000000.00000000";
            case "254.0.0.0" -> "11111110.00000000.00000000.00000000";
            case "255.0.0.0" -> "11111111.00000000.00000000.00000000";
            case "255.128.0.0" -> "11111111.10000000.00000000.00000000";
            case "255.192.0.0" -> "11111111.11000000.00000000.00000000";
            case "255.224.0.0" -> "11111111.11100000.00000000.00000000";
            case "255.240.0.0" -> "11111111.11110000.00000000.00000000";
            case "255.248.0.0" -> "11111111.11111000.00000000.00000000";
            case "255.252.0.0" -> "11111111.11111100.00000000.00000000";
            case "255.254.0.0" -> "11111111.11111110.00000000.00000000";
            case "255.255.0.0" -> "11111111.11111111.00000000.00000000";
            case "255.255.128.0" -> "11111111.11111111.10000000.00000000";
            case "255.255.192.0" -> "11111111.11111111.11000000.00000000";
            case "255.255.224.0" -> "11111111.11111111.11100000.00000000";
            case "255.255.240.0" -> "11111111.11111111.11110000.00000000";
            case "255.255.248.0" -> "11111111.11111111.11111000.00000000";
            case "255.255.252.0" -> "11111111.11111111.11111100.00000000";
            case "255.255.254.0" -> "11111111.11111111.11111110.00000000";
            case "255.255.255.0" -> "11111111.11111111.11111111.00000000";
            case "255.255.255.128" -> "11111111.11111111.11111111.10000000";
            case "255.255.255.192" -> "11111111.11111111.11111111.11000000";
            case "255.255.255.224" -> "11111111.11111111.11111111.11100000";
            case "255.255.255.240" -> "11111111.11111111.11111111.11110000";
            case "255.255.255.248" -> "11111111.11111111.11111111.11111000";
            case "255.255.255.252" -> "11111111.11111111.11111111.11111100";
            case "255.255.255.254" -> "11111111.11111111.11111111.11111110";
            case "255.255.255.255" -> "11111111.11111111.11111111.11111111";
            default -> throw new IllegalMaskException("Address extension outside range 1-32.");
        };
    }

    /**
     * Converts address extension to BitString style String.
     * @param ext {@link Integer} Extension to convert to a BitString style String.
     * @return {@link String} BitString formatted as String.
     * @throws IllegalMaskException If extension is invalid.
     */
    public static @NotNull String toBitString(@NotNull Integer ext) throws IllegalMaskException {
        return switch (ext) {
            case 1 -> "10000000.00000000.00000000.00000000";
            case 2 -> "11000000.00000000.00000000.00000000";
            case 3 -> "11100000.00000000.00000000.00000000";
            case 4 -> "11110000.00000000.00000000.00000000";
            case 5 -> "11111000.00000000.00000000.00000000";
            case 6 -> "11111100.00000000.00000000.00000000";
            case 7 -> "11111110.00000000.00000000.00000000";
            case 8 -> "11111111.00000000.00000000.00000000";
            case 9 -> "11111111.10000000.00000000.00000000";
            case 10 -> "11111111.11000000.00000000.00000000";
            case 11 -> "11111111.11100000.00000000.00000000";
            case 12 -> "11111111.11110000.00000000.00000000";
            case 13 -> "11111111.11111000.00000000.00000000";
            case 14 -> "11111111.11111100.00000000.00000000";
            case 15 -> "11111111.11111110.00000000.00000000";
            case 16 -> "11111111.11111111.00000000.00000000";
            case 17 -> "11111111.11111111.10000000.00000000";
            case 18 -> "11111111.11111111.11000000.00000000";
            case 19 -> "11111111.11111111.11100000.00000000";
            case 20 -> "11111111.11111111.11110000.00000000";
            case 21 -> "11111111.11111111.11111000.00000000";
            case 22 -> "11111111.11111111.11111100.00000000";
            case 23 -> "11111111.11111111.11111110.00000000";
            case 24 -> "11111111.11111111.11111111.00000000";
            case 25 -> "11111111.11111111.11111111.10000000";
            case 26 -> "11111111.11111111.11111111.11000000";
            case 27 -> "11111111.11111111.11111111.11100000";
            case 28 -> "11111111.11111111.11111111.11110000";
            case 29 -> "11111111.11111111.11111111.11111000";
            case 30 -> "11111111.11111111.11111111.11111100";
            case 31 -> "11111111.11111111.11111111.11111110";
            case 32 -> "11111111.11111111.11111111.11111111";
            default -> throw new IllegalMaskException("Address extension outside range 1-32.");
        };
    }

    public static @NotNull String toBitString(IPv6 ipv6) throws IllegalMaskException {
        return switch (ipv6.toString()) {
            case "128.0.0.0" -> "10000000.00000000.00000000.00000000";
            case "192.0.0.0" -> "11000000.00000000.00000000.00000000";
            case "224.0.0.0" -> "11100000.00000000.00000000.00000000";
            case "240.0.0.0" -> "11110000.00000000.00000000.00000000";
            case "248.0.0.0" -> "11111000.00000000.00000000.00000000";
            case "252.0.0.0" -> "11111100.00000000.00000000.00000000";
            case "254.0.0.0" -> "11111110.00000000.00000000.00000000";
            case "255.0.0.0" -> "11111111.00000000.00000000.00000000";
            case "255.128.0.0" -> "11111111.10000000.00000000.00000000";
            case "255.192.0.0" -> "11111111.11000000.00000000.00000000";
            case "255.224.0.0" -> "11111111.11100000.00000000.00000000";
            case "255.240.0.0" -> "11111111.11110000.00000000.00000000";
            case "255.248.0.0" -> "11111111.11111000.00000000.00000000";
            case "255.252.0.0" -> "11111111.11111100.00000000.00000000";
            case "255.254.0.0" -> "11111111.11111110.00000000.00000000";
            case "255.255.0.0" -> "11111111.11111111.00000000.00000000";
            case "255.255.128.0" -> "11111111.11111111.10000000.00000000";
            case "255.255.192.0" -> "11111111.11111111.11000000.00000000";
            case "255.255.224.0" -> "11111111.11111111.11100000.00000000";
            case "255.255.240.0" -> "11111111.11111111.11110000.00000000";
            case "255.255.248.0" -> "11111111.11111111.11111000.00000000";
            case "255.255.252.0" -> "11111111.11111111.11111100.00000000";
            case "255.255.254.0" -> "11111111.11111111.11111110.00000000";
            case "255.255.255.0" -> "11111111.11111111.11111111.00000000";
            case "255.255.255.128" -> "11111111.11111111.11111111.10000000";
            case "255.255.255.192" -> "11111111.11111111.11111111.11000000";
            case "255.255.255.224" -> "11111111.11111111.11111111.11100000";
            case "255.255.255.240" -> "11111111.11111111.11111111.11110000";
            case "255.255.255.248" -> "11111111.11111111.11111111.11111000";
            case "255.255.255.252" -> "11111111.11111111.11111111.11111100";
            case "255.255.255.254" -> "11111111.11111111.11111111.11111110";
            case "255.255.255.255" -> "11111111.11111111.11111111.11111111";
            default -> throw new IllegalMaskException("Address extension outside range 1-32.");
        };
    }

    /**
     * Converts a given {@code BitString} to address extension format.
     * @param address {@link String} BitString to convert.
     * @return {@link Integer} converted IPv4 extension if extension is {@code true}.
     * <p>
     * {@link IPv4} Converted IPv4 address if extension is {@code false}.
     */
    public static @NotNull Object toAddress(@NotNull String address, boolean extension) throws IllegalMaskException, IllegalAddressException {
        if(extension) {
            return switch (address) {
                case "10000000.00000000.00000000.00000000" -> 1;
                case "11000000.00000000.00000000.00000000" -> 2;
                case "11100000.00000000.00000000.00000000" -> 3;
                case "11110000.00000000.00000000.00000000" -> 4;
                case "11111000.00000000.00000000.00000000" -> 5;
                case "11111100.00000000.00000000.00000000" -> 6;
                case "11111110.00000000.00000000.00000000" -> 7;
                case "11111111.00000000.00000000.00000000" -> 8;
                case "11111111.10000000.00000000.00000000" -> 9;
                case "11111111.11000000.00000000.00000000" -> 10;
                case "11111111.11100000.00000000.00000000" -> 11;
                case "11111111.11110000.00000000.00000000" -> 12;
                case "11111111.11111000.00000000.00000000" -> 13;
                case "11111111.11111100.00000000.00000000" -> 14;
                case "11111111.11111110.00000000.00000000" -> 15;
                case "11111111.11111111.00000000.00000000" -> 16;
                case "11111111.11111111.10000000.00000000" -> 17;
                case "11111111.11111111.11000000.00000000" -> 18;
                case "11111111.11111111.11100000.00000000" -> 19;
                case "11111111.11111111.11110000.00000000" -> 20;
                case "11111111.11111111.11111000.00000000" -> 21;
                case "11111111.11111111.11111100.00000000" -> 22;
                case "11111111.11111111.11111110.00000000" -> 23;
                case "11111111.11111111.11111111.00000000" -> 24;
                case "11111111.11111111.11111111.10000000" -> 25;
                case "11111111.11111111.11111111.11000000" -> 26;
                case "11111111.11111111.11111111.11100000" -> 27;
                case "11111111.11111111.11111111.11110000" -> 28;
                case "11111111.11111111.11111111.11111000" -> 29;
                case "11111111.11111111.11111111.11111100" -> 30;
                case "11111111.11111111.11111111.11111110" -> 31;
                case "11111111.11111111.11111111.11111111" -> 32;
                default -> throw new IllegalMaskException("Address extension outside range 1-32.");
            };
        }
        else{
            return switch (address) {
                case "10000000.00000000.00000000.00000000" -> IPv4.toIPv4("128.0.0.0");
                case "11000000.00000000.00000000.00000000" -> IPv4.toIPv4("192.0.0.0");
                case "11100000.00000000.00000000.00000000" -> IPv4.toIPv4("224.0.0.0");
                case "11110000.00000000.00000000.00000000" -> IPv4.toIPv4("240.0.0.0");
                case "11111000.00000000.00000000.00000000" -> IPv4.toIPv4("248.0.0.0");
                case "11111100.00000000.00000000.00000000" -> IPv4.toIPv4("252.0.0.0");
                case "11111110.00000000.00000000.00000000" -> IPv4.toIPv4("254.0.0.0");
                case "11111111.00000000.00000000.00000000" -> IPv4.toIPv4("255.0.0.0");
                case "11111111.10000000.00000000.00000000" -> IPv4.toIPv4("255.128.0.0");
                case "11111111.11000000.00000000.00000000" -> IPv4.toIPv4("255.192.0.0");
                case "11111111.11100000.00000000.00000000" -> IPv4.toIPv4("255.224.0.0");
                case "11111111.11110000.00000000.00000000" -> IPv4.toIPv4("255.240.0.0");
                case "11111111.11111000.00000000.00000000" -> IPv4.toIPv4("255.248.0.0");
                case "11111111.11111100.00000000.00000000" -> IPv4.toIPv4("255.252.0.0");
                case "11111111.11111110.00000000.00000000" -> IPv4.toIPv4("255.254.0.0");
                case "11111111.11111111.00000000.00000000" -> IPv4.toIPv4("255.255.0.0");
                case "11111111.11111111.10000000.00000000" -> IPv4.toIPv4("255.255.128.0");
                case "11111111.11111111.11000000.00000000" -> IPv4.toIPv4("255.255.192.0");
                case "11111111.11111111.11100000.00000000" -> IPv4.toIPv4("255.255.224.0");
                case "11111111.11111111.11110000.00000000" -> IPv4.toIPv4("255.255.240.0");
                case "11111111.11111111.11111000.00000000" -> IPv4.toIPv4("255.255.248.0");
                case "11111111.11111111.11111100.00000000" -> IPv4.toIPv4("255.255.252.0");
                case "11111111.11111111.11111110.00000000" -> IPv4.toIPv4("255.255.254.0");
                case "11111111.11111111.11111111.00000000" -> IPv4.toIPv4("255.255.255.0");
                case "11111111.11111111.11111111.10000000" -> IPv4.toIPv4("255.255.255.128");
                case "11111111.11111111.11111111.11000000" -> IPv4.toIPv4("255.255.255.192");
                case "11111111.11111111.11111111.11100000" -> IPv4.toIPv4("255.255.255.224");
                case "11111111.11111111.11111111.11110000" -> IPv4.toIPv4("255.255.255.240");
                case "11111111.11111111.11111111.11111000" -> IPv4.toIPv4("255.255.255.248");
                case "11111111.11111111.11111111.11111100" -> IPv4.toIPv4("255.255.255.252");
                case "11111111.11111111.11111111.11111110" -> IPv4.toIPv4("255.255.255.254");
                case "11111111.11111111.11111111.11111111" -> IPv4.toIPv4("255.255.255.255");
                default -> throw new IllegalMaskException("Address extension outside range 1-32.");
            };
        }
    }
}
